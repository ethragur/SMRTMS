apply plugin: 'java'

version = '0.1'
sourceCompatibility = 1.7
targetCompatibility = 1.7
sourceSets.main.java.srcDirs = ['.']
libsDirName = '../repo'

repositories {
    mavenCentral()
}

version='0.1'

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-log4j12:1.7.7'
    compile "org.java-websocket:Java-WebSocket:1.3.0"
    compile 'org.jooq:jooq:3.6.0'
    compile 'org.jooq:jooq-meta:3.6.0'
    compile 'mysql:mysql-connector-java:+'
    compile 'com.google.code.gson:gson:2.3.1'
    runtime 'com.h2database:h2:1.4.177'
    testCompile 'junit:junit:[4,)'
}



buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.6.0'
        classpath 'com.h2database:h2:1.4.177'
        classpath 'mysql:mysql-connector-java:+'
    }
}

tasks.withType(JavaCompile) {
  doFirst {
        if (sourceCompatibility == '1.7' && System.env.JDK7_HOME != null) {
            options.fork = true
            options.bootClasspath = "$System.env.JDK7_HOME/jre/lib/rt.jar"
            options.bootClasspath += "$File.pathSeparator$System.env.JDK7_HOME/jre/lib/jsse.jar"
            // use the line above as an example to add jce.jar
            // and other specific JDK jars
        }
    }
}

task generate << {

    // Use your favourite XML builder to construct the code generation configuration file
    // ----------------------------------------------------------------------------------
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.6.0.xsd') {
        jdbc() {
            driver('com.mysql.jdbc.Driver')
            url('jdbc:mysql://127.0.0.1:3306/SMRTMS')
            user('root')
            password('')
        }
        
        generator() {
            database() {
                name('org.jooq.util.mysql.MySQLDatabase')
                includes('.*')
                inputSchema('SMRTMS')
            }
            generate() {
            }
            target() {
                packageName('jooqdb')
                directory('.')
            }
        }
    }

    // Run the code generator
    // ----------------------
    org.jooq.util.GenerationTool.main(
            javax.xml.bind.JAXB.unmarshal(
                    new StringReader(writer.toString()),
                    org.jooq.util.jaxb.Configuration.class
            )
    )
}
task cleanGeneratedFiles << {
    delete fileTree(dir: "db/generated")
}
test {
    testLogging {
        events = ["passed", "standard_error", "failed", "skipped"]
        exceptionFormat 'full'
        showCauses true
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Server for SEPM',
                'Implementation-Version': version,
                'Main-Class': 'server.Main'
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Server for SEPM',
                'Implementation-Version': version,
                'Main-Class':  'server.Main'
    }
    baseName = 'SMRTMS_Server_Jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it)  }  }
    with jar
}

compileJava.dependsOn(generate)
clean.dependsOn(cleanGeneratedFiles)
assemble.dependsOn(fatJar)
